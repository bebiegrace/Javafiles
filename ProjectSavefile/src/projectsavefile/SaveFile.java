/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projectsavefile;

import static com.sun.org.apache.xalan.internal.xsltc.compiler.util.Type.String;
import java.awt.Color;
import java.awt.FileDialog;
import java.awt.datatransfer.Clipboard;
import java.awt.event.TextEvent;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import javax.swing.JOptionPane;
import static sun.java2d.cmm.ColorTransform.Out;

/**
 *
 * @author 1styrGroupB
 */
public class SaveFile extends javax.swing.JFrame {

    //variable declaration...
    
    String programName = "BNotepad";
    String filename = "";
    String holdText = "";
    String fn = "";
    String dir = "";
    boolean textChanged = false;
    String fileName;
    Clipboard clip = getToolkit().getSystemClipboard();
    
            
    /**
     * Creates new form SaveFile
     */
    public SaveFile() {
        initComponents();
        
    }
    public void checkFile(){
        
        BufferedReader read;
        StringBuffer sb = new StringBuffer();
        try{
            read = new BufferedReader(new FileReader(fileName));
            String line;
            while ((line = read.readLine()) != null){
                   sb.append(line + "\n");
            
        }
        TextArea.setText(sb.toString());
        read.close();
       
    }catch (FileNotFoundException e) {
    System.out.println("File not found");

}catch (IOException eio){
    
    
}
    }

  


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        DialogChooser = new javax.swing.JDialog();
        ColorChooser = new javax.swing.JColorChooser();
        TextArea = new java.awt.TextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Newmenu = new javax.swing.JMenuItem();
        Openmenu = new javax.swing.JMenuItem();
        Savemenu = new javax.swing.JMenuItem();
        Saveasmenu = new javax.swing.JMenuItem();
        Exitmenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        ColorMenu = new javax.swing.JMenuItem();

        menu1.setLabel("File");
        menuBar1.add(menu1);

        javax.swing.GroupLayout DialogChooserLayout = new javax.swing.GroupLayout(DialogChooser.getContentPane());
        DialogChooser.getContentPane().setLayout(DialogChooserLayout);
        DialogChooserLayout.setHorizontalGroup(
            DialogChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ColorChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 675, Short.MAX_VALUE)
        );
        DialogChooserLayout.setVerticalGroup(
            DialogChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ColorChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jMenu1.setText("File");

        Newmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        Newmenu.setText("New");
        Newmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewmenuActionPerformed(evt);
            }
        });
        jMenu1.add(Newmenu);

        Openmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        Openmenu.setText("Open");
        Openmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenmenuActionPerformed(evt);
            }
        });
        jMenu1.add(Openmenu);

        Savemenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        Savemenu.setText("Save");
        Savemenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SavemenuActionPerformed(evt);
            }
        });
        jMenu1.add(Savemenu);

        Saveasmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        Saveasmenu.setText("Save as");
        Saveasmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveasmenuActionPerformed(evt);
            }
        });
        jMenu1.add(Saveasmenu);

        Exitmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        Exitmenu.setText("Exit");
        Exitmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitmenuActionPerformed(evt);
            }
        });
        jMenu1.add(Exitmenu);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        ColorMenu.setText("Text Color");
        ColorMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColorMenuActionPerformed(evt);
            }
        });
        jMenu2.add(ColorMenu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TextArea, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TextArea, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SavemenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SavemenuActionPerformed
       //handling code
       if(filename.equals(""))
           saveAs();
       else
           save(filename);
    }//GEN-LAST:event_SavemenuActionPerformed

    private void SaveasmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveasmenuActionPerformed
        saveAs();
    }//GEN-LAST:event_SaveasmenuActionPerformed

    private void NewmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewmenuActionPerformed
        newFile();
    }//GEN-LAST:event_NewmenuActionPerformed

    private void OpenmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenmenuActionPerformed
        // TODO add your handling code here:
        if(TextArea.getText().length() < 1) {
            FileDialog fd = new FileDialog(this, "choose File", FileDialog.LOAD);
            fd.show();
            if(fd.getFile() != null){
                fileName = fd.getDirectory() + fd.getFile();
                setTitle(filename);
                checkFile();
            }
            TextArea.requestFocus();
            
        }
        else{
            int confirm = JOptionPane.showConfirmDialog(null, "Do you Want to save this file?");
            if (confirm==JOptionPane.YES_OPTION)
            {
                if("".equals(filename)){
                    saveAs();
                }
                else{
                    save(filename);
                }
            FileDialog fd = new FileDialog(this, "Choose File", FileDialog.LOAD);
            fd.show();
            if(fd.getFile() != null) {
                fileName = fd.getDirectory() + fd.getFile();
                setTitle(filename);
                checkFile();
                
            }
            }
        }
    }//GEN-LAST:event_OpenmenuActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if("".equals(TextArea.getText())){
             System.exit(0);
             
        
    }
        else if(!textChanged){
            System.exit(0);
            
        }
        else{
           int confirm = JOptionPane.showConfirmDialog(null, "Do you Want to save this file?");
            if (confirm==JOptionPane.YES_OPTION)
            {
                if("".equals(filename)){
                    saveAs();
                }
                else{
                    save(filename);
                System.exit(0);
                
                }       
            }
            if (confirm==JOptionPane.NO_OPTION)
            {
                System.exit(0);
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void ColorMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColorMenuActionPerformed
        // TODO add your handling code here:
//        Color c =ColorChooser.showDialog(null, "Color Dialog");
//        TextArea.setForeground(c);
   
      
    }//GEN-LAST:event_ColorMenuActionPerformed

    private void ExitmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitmenuActionPerformed
       if("".equals(TextArea.getText())){
             System.exit(0);
             
        
    }
        else if(!textChanged){
            System.exit(0);
            
        }
        else{
           int confirm = JOptionPane.showConfirmDialog(this, "Do you Want to save this file?");
            if (confirm==JOptionPane.YES_OPTION)
            {
                if(filename.equals(""))
                    saveAs();
                            
                else
                    save(filename);
                
              }  
            if (confirm==JOptionPane.NO_OPTION)
            {
                System.exit(0);
            }
        }
                                
    }//GEN-LAST:event_ExitmenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SaveFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SaveFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SaveFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SaveFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SaveFile().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JColorChooser ColorChooser;
    private javax.swing.JMenuItem ColorMenu;
    private javax.swing.JDialog DialogChooser;
    private javax.swing.JMenuItem Exitmenu;
    private javax.swing.JMenuItem Newmenu;
    private javax.swing.JMenuItem Openmenu;
    private javax.swing.JMenuItem Saveasmenu;
    private javax.swing.JMenuItem Savemenu;
    private java.awt.TextArea TextArea;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private java.awt.Menu menu1;
    private java.awt.MenuBar menuBar1;
    // End of variables declaration//GEN-END:variables

    private void saveAs() {
         FileDialog fd = new  FileDialog(SaveFile.this, "Save", FileDialog.SAVE );
         fd.show();
         if (fd.getFile()!= null ){
             fn=fd.getFile();
             dir=fd.getDirectory();
             filename = dir + fn +".txt";
             
             setTitle(filename);
             try{
                 DataOutputStream d = new DataOutputStream(new FileOutputStream(filename));
                 holdText = TextArea.getText();
                 BufferedReader br = new BufferedReader(new StringReader(holdText));
                 while ((holdText = br.readLine()) != null)
                 {
                  d.writeBytes(holdText + "\r\n");
                  d.close();
                 }
             }
             catch (Exception e)
             {
                 System.out.println("File note found");
             }
             TextArea.requestFocus();
             save(filename);
             
         }
    }

    private void save(String filename) {
       setTitle(programName +" "+filename);
       try
       {
           FileWriter out;
           out = new FileWriter(fn);
           out.write(TextArea.getText());
           out.close();
           
    
       }
       catch(Exception ex)
       {
           System.out.println("Error: " + ex);
       }
       textChanged=false;
       Savemenu.setEnabled(false);
       
    }

    private void newFile() {
        if(TextArea.getText().length() < 1) {
        setTitle("Untitled-"+programName);
        TextArea.setText("");
        textChanged=false;
        
        }
        else if(!textChanged){
         setTitle("Untitled-"+programName);
         TextArea.setText("");
         textChanged=false;
        }
        else{
           int confirm = JOptionPane.showConfirmDialog(null, "Do you Want to save this file?");
            if (confirm==JOptionPane.YES_OPTION)
            {
                if("".equals(filename)){
                    saveAs();
                }
                else{
                    save(filename);
                }
                setTitle (programName);
                filename="";
                TextArea.setText("");
                textChanged=false;
            }
                
             else if(confirm == JOptionPane.NO_OPTION)
                 
                    {
                     setTitle(programName);
                     TextArea.setText("");
                     textChanged=false;
                     } 
                 
                
            }
        }
  }


